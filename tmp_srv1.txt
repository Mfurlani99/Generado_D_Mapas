const path = require('path');
const fs = require('fs');
const fsp = fs.promises;
const morgan = require('morgan');

// Prefer native fetch (Node 18+); fallback to node-fetch
const getFetch = () => {
  if (typeof fetch !== 'undefined') return fetch;
  return (...args) => import('node-fetch').then(({ default: f }) => f(...args));
};
const fetchFn = getFetch();

const app = express();
const PORT = process.env.PORT || 3000;
const DATA_DIR = path.join(__dirname, 'data');
const DATA_FILE = path.join(DATA_DIR, 'addresses.json');

app.use(morgan('dev'));
app.use(express.json({ limit: '2mb' }));

// Serve static files from the project root
app.use(express.static(__dirname));

// Ensure data directory exists
async function ensureDataDir() {
  try {
    await fsp.mkdir(DATA_DIR, { recursive: true });
  } catch (err) {
    console.error('Error creating data dir:', err);
  }
}

// Simple health check
app.get('/api/health', (req, res) => {
  res.json({ ok: true });
});

// Geocoding proxy supporting Nominatim (OSM), Georef (AR) and Mapbox
// Usage: GET /api/geocode?q=Direccion&engine=auto|georef|nominatim|mapbox&restrict=comuna9
app.get('/api/geocode', async (req, res) => {
  const q = (req.query.q || '').toString().trim();
  const restrict = (req.query.restrict || '').toString() === 'comuna9';
  const engine = (req.query.engine || 'auto').toString();
  if (!q) return res.status(400).json({ error: 'Missing query parameter q' });

  // Nominatim helpers
  const CABA_VIEWBOX = {
    left: -58.531,   // oeste
    top: -34.526,    // norte (lat menos negativa)
    right: -58.335,  // este
    bottom: -34.705  // sur (lat más negativa)
  };
  const fetchNominatim = async (query, useCabaBox = false) => {
    const params = new URLSearchParams({
      q: query,
      format: 'jsonv2',
      addressdetails: '1',
      limit: '10',
      countrycodes: 'ar'
    });
    if (useCabaBox) {
      params.set('viewbox', `${CABA_VIEWBOX.left},${CABA_VIEWBOX.top},${CABA_VIEWBOX.right},${CABA_VIEWBOX.bottom}`);
      params.set('bounded', '1');
    }
    const url = `https://nominatim.openstreetmap.org/search?${params.toString()}`;
    const resp = await fetchFn(url, {
      headers: {
        'User-Agent': 'GeneradorMapas/1.0 (local app)',
        'Accept': 'application/json',
        'Accept-Language': 'es'
      }
    });
    if (!resp.ok) {
      const txt = await resp.text();
      throw new Error(`Upstream error ${resp.status}: ${txt}`);
    }
    return resp.json();
  };
  const inComuna9_OSM = (addr) => {
    if (!addr) return false;
    const suburb = (addr.suburb || '').toLowerCase();
    const cityDistrict = (addr.city_district || addr.district || '').toLowerCase();
    const city = (addr.city || addr.town || '').toLowerCase();
    const state = (addr.state || '').toLowerCase();
    const matchesSuburb = ['liniers','mataderos','parque avellaneda'].includes(suburb);
    const matchesDistrict = cityDistrict.includes('comuna 9');
    const matchesCaba = city.includes('buenos aires') || state.includes('buenos aires') || city.includes('autónoma') || state.includes('autónoma') || city === 'caba' || state === 'caba' || city.includes('ciudad autonoma') || state.includes('ciudad autonoma');
    return (matchesSuburb || matchesDistrict) && (matchesCaba || matchesSuburb);
  };

  // Georef helpers
  const fetchGeoref = async (query, opts = {}) => {
    const params = new URLSearchParams({ direccion: query, max: String(opts.max || 10) });
    if (opts.provincia) params.set('provincia', opts.provincia);
    if (opts.departamento) params.set('departamento', opts.departamento);
    const url = `https://apis.datos.gob.ar/georef/api/direcciones?${params.toString()}`;
    const resp = await fetchFn(url, {
      headers: {
        'Accept': 'application/json',
        'Accept-Language': 'es-AR,es;q=0.9',
        'User-Agent': 'GeneradorMapas/1.0 (local app)'
      }
    });
    if (!resp.ok) {
      const txt = await resp.text();
      throw new Error(`Georef upstream error ${resp.status}: ${txt}`);
    }
    const json = await resp.json();
    const dirs = Array.isArray(json?.direcciones) ? json.direcciones : [];
    const mapped = dirs
      .filter(d => d?.ubicacion && typeof d.ubicacion.lat === 'number' && typeof d.ubicacion.lon === 'number')
      .map(d => {
        const lat = d.ubicacion.lat;
        const lon = d.ubicacion.lon;
        const calle = d.calle?.nombre || '';
        const altura = d.altura || d.puerta || '';
        const localidad = d.localidad?.nombre || d.municipio?.nombre || '';
        const provincia = d.provincia?.nombre || '';
        const display_name = [calle && `${calle} ${altura}`.trim(), localidad, provincia, 'Argentina'].filter(Boolean).join(', ');
        const address = {
